enum SortType{
    RATING,
    POPULAR, #etc
}

type Query{
    getLoggedInUser : User # Use Authorization: Bearer JWT token
    getUser(name: String) : User # Returns a User without Authentication for profile view
    getWhiskey(id: ID!) : Whiskey
    getReview(id: ID!) : Rating

    getWhiskeys(sortType : SortType): [Whiskey]
}

type Mutation{
    editUser(user : EditUserInput) : User   #Verify user using JWT token
    deleteUser : String

    createWhiskey(whiskey : WhiskeyInput) : Whiskey
    editWhiskey(id: ID!, whiskey : WhiskeyInput) : Whiskey
    deleteWhiskey(id: ID!) : String # Return "ok" as confirmation

    createThumb(ratingId: ID!, thumb: Boolean) : Thumb #User: ID! identified by JWT
    editThumb(id: ID!, thumb: Boolean): Thumb
    deleteThumb(id: ID!) : String

    createRating(whiskeyId: ID!, rating : RatingInput) : Rating
    editRating(id: ID!, rating : RatingInput) : Rating
    deleteRating(id: ID!) : String

    #login(auth : AuthInput) : User                  # Replaced with POST /login
    #logout(auth : AuthInput) : String               # Replaced with POST /logout
    #createUser(register : RegisterInput) : User     # Replaced with POST /register
}

# Input forms

#input AuthInput{
#    username: String!,
#    password: String!
#}

input RatingInput{
    title: String,
    body: String,
    rating: Float,
}

input EditUserInput{
    name: String,
    email: String,
    password: String,
    img: String,
}

input WhiskeyInput{
    title: String
    summary: String
    img: String

    price: Float
    volume: Float
    percentage: Float
}

# Type definitions
type User{
    id: ID!
    name: String
    img: String
    createdAt: String

    ratings: [Rating]
}

type Whiskey{
    id: ID!

    title: String
    summary: String
    img: String

    price: Float
    volume: Float
    percentage: Float

    ratings: [Rating]
    rating: Float # Average of all ratings
}

# Rating -> Review?
# Thumb -> Feedback/Vote?
type Rating{
    id: ID!
    user: User!
    whiskey: Whiskey!

    title: String
    body: String
    rating: Float
    createdAt: String

    thumbs: [Thumb]
}


type Thumb{
    id: ID!
    rating: Rating!
    user: User!

    thumb: Boolean
}