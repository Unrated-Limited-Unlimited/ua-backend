enum SortType{
    BEST,
    PRICE,
    POPULAR,
    RANDOM,
    DEFAULT,
    #PERSONALIZED # Get "AI" recommended based on user preferences
}

type Query{
    # Get logged in user using JWT
    getLoggedInUser : AuthUser

    # User starting with name used for profile view
    getUser(name: String!) : User

    # Get own thumb verdict from a rating/review
    getThumb(ratingId: ID!) : Thumb
    getWhiskey(id: ID!) : Whiskey
    getRating(id: ID!) : Rating

    # Get a list of whiskeys based on sortType seperated by paging: {page: 0, size: 10}
    getWhiskeys(sortType : SortType, paging: Paging): [Whiskey]

    # Get all created attribute categories
    getAttributeCategories : [AttributeCategory]
}

type Mutation{
    #Requires valid JWT token
    editUser(user : EditUserInput) : AuthUser
    deleteUser : String

    createRating(whiskeyId: ID!, ratingInput : RatingInput!, attributeInputs: [AttributeInput]) : Rating
    editRating(id: ID!, ratingInput : RatingInput, attributeInputs: [AttributeInput]) : Rating
    deleteRating(id: ID!) : String

    createThumb(ratingId: ID!, isGood: Boolean!) : Thumb #User: ID! identified by JWT
    editThumb(id: ID!, isGood: Boolean!): Thumb
    deleteThumb(id: ID!) : String


    # Requires ROLE_ADMIN
    createWhiskey(whiskeyInput : WhiskeyInput!) : Whiskey
    editWhiskey(id: ID!, whiskeyInput : WhiskeyInput) : Whiskey
    deleteWhiskey(id: ID!) : String # Return "deleted" as confirmation

    createAttributeCategory(name: String!) : AttributeCategory
    editAttributeCategory(id:ID!, name: String) : AttributeCategory
    deleteAttributeCategory(id: ID!) : String
}

######################################

input Paging{
    page: Int = 0
    size: Int = 10
}

input RatingInput{
    title: String
    body: String
    score: Float
}

# Add attributes to reviews by giving attribute category id and a score value.
# The category IDs can be found from Query::getAttributes()
input AttributeInput{
    id: ID!
    score: Float!
}

input EditUserInput{
    email: String
    password: String
    img: String
}

input WhiskeyInput{
    title: String!
    summary: String
    img: String

    price: Float
    volume: Float
    percentage: Float
}

######################################

type AuthUser{
    id: ID!
    name: String
    email: String
    img: String
    createdAt: String

    ratings: [Rating]
}

# Type definitions
type User{
    id: ID!
    name: String
    img: String
    createdAt: String

    ratings: [Rating]
}

type Whiskey{
    id: ID!

    title: String
    summary: String
    img: String

    price: Float
    volume: Float
    percentage: Float

    ratings: [Rating]
    avgScore: Float # Average score of all ratings

    categories: [AttributeCategory]
}

type Rating{
    id: ID!
    user: User!
    whiskey: Whiskey!
    attributes: [Attribute]

    title: String
    body: String
    score: Float
    createdAt: String

    thumbs: [Thumb]
}

type Thumb{
    id: ID!
    rating: Rating!
    user: User!

    isGood: Boolean
}

type Attribute{
    id: ID!
    rating: Rating
    category: AttributeCategory

    score: Float
}

type AttributeCategory{
    id: ID!

    name: String
    attributes: [Attribute]
    avgScore: Float
}