
type Query{
    getUser(name: String) : User # Returns a User without Authentication for profile view

    getWhiskeys: [Whiskey]
    getWhiskey(id: ID!) : Whiskey
}

type Mutation{
    createRating(rating : RatingInput) : Rating
    createThumb(Rating: ID!, User: ID!) : Thumb

    login(auth : AuthInput) : User #TODO add session token in args?
    logout(auth : AuthInput) : String
}

input RatingInput{
    userId: ID!,
    whiskeyId: ID!,
}

input AuthInput{
    username: String!,
    password: String!
}

type Auth{ # Needed?
    id: ID!,
    user: User,
    email: String
    #password: String
}

type User{
    id: ID!
    name: String
    img: String
    createdAt: String #TODO Date?

    ratings: [Rating]
}


type Whiskey{
    id: ID!

    img: String
    title: String
    price: Float
    summary: String
    volume: Float
    percentage: Float

    ratings: [Rating]
    rating: Float # Average of all ratings
}

# Rating -> Review?
# Thumb -> Feedback?
type Rating{
    id: ID!
    user: User!
    whiskey: Whiskey!

    title: String
    body: String
    rating: Float
    createdAt: String

    thumbs: [Thumb]
}


type Thumb{
    id: ID!
    rating: Rating!
    user: User!

    thumb: Boolean
}